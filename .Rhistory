data("airquality")
View(airquality)
data("airquality")
View(airquality)
airquality$Month  <- factor(airquality$Month, ordered=TRUE)
airquality$Day  <- factor(airquality$Day, ordered=TRUE)
library(dplyr)
airquality <- tbl_df(airquality)
filter(airquality,Month==5,Temp>70)
airquality <- mutate(airquality, TempC=(5/9)*(Temp-32))
arrange(airquality, desc(Temp))%>%slice(1:30)
arrange(airquality, desc(Temp), desc(Ozone))%>%slice(1:30)
arrange(airquality, desc(Temp))%>%slice(1:30)
View(airquality)
arrange(airquality,desc(Ozone),desc(TempC))
library(dplyr)
arrange(airquality,desc(Ozone),desc(TempC))
airquality %>% group_by(Month) %>% summarize(ndays=n())
airquality %>% group_by(Month) %>% summarize(minTemp=min(TempC),maxTemp=max(TempC))
airquality %>% group_by(Month) %>% summarize(avg.Oz=mean(Ozone),
avg.Temp = mean(TempC),
avg.SolarR = mean(Solar.R),
avg.Wind = mean(Wind))
library(dplyr)
airquality %>% group_by(Month) %>% summarise(mean(Temp))
View(airquality)
summarize(airquality)
sumarize(airquality)
load(airquality)
load("airquality")
View(airquality)
summarize(airquality)
library(dplyr)
summarize(airquality)
aq <- load(airquality)
aq <- airquality
View(aq)
aq <- aq[-(1:4),]
summarize(aq)
dim(aq)
summarize(aq)
summarize(aq$Wind)
summarize(aq)
summary(aq)
as.factor(aq$Temp)
aq$Month <- factor(aq$Month, ordered = TRUE, levels=1:12)
summary(aq)
is.ordered(aq$Month)
is.ordered(aq$Day)
data()
load(carInsurance)
load("carInsurance")
View(airquality)
data("airquality")
airquality
library(dplyr)
aq <- tbl_df(airquality)
group_by(aq$ozone) %>% count()
aq %>% group_by(ozone) %>% count()
aq %>% group_by(Ozone) %>% count()
aq %>% as.factor(Ozone)
aq %>% as.factor(aq$Ozone)
aq %>% group_by(Ozone) %>% count()
as.factor(aq$Ozone)
factor(aq$Ozone)
summary(aq)
aq <- as.factor(aq$Ozone)
summary(aq)
airquality %>% select(-Ozone) %>% group_by(Month) %>% summarize_if(is.numeric, mean)
library(dplyr)
airquality %>% select(-Ozone) %>% group_by(Month) %>% summarize_if(is.numeric, mean)
airquality %>% mutate(boas="oi")
airquality <- mutate(boas="oi")
airquality <- airquality %>% mutate(boas="oi")
airquality %>% select(-Ozone) %>% group_by(Month) %>% summarize_if(is.numeric, mean)
airquality %>% select(-Ozone) %>% group_by(Month) %>% summarize_if(is.numeric, mean)
airquality %>% select(-Ozone)
View(airquality)
View(airquality)
View(airquality)
View(airquality)
View(airquality)
rm(airquality)
rm(aq)
clear
library(MASS)
install.packages("glmnet")
library(glmnet)
library(caret)
library(rpart)
install.packages("rpart.plot")
library(rpart.plot)
data(package="MASS")
dat(Boston)
data(Boston)
force(Boston)
View(Boston)
View(Boston)
library(dplyr)
libary(ggplot2)
library(ggplot2)
glimpse(Boston)
setwd("C:/Users/35193/Desktop/Profissional/Faculdade/4º Ano/2º Semestre/Tópicos Avançados Inteligência Artificial/AI-Identify-music-genre-from-an-audio-file")
# Get genre of a unique music
# Import dataset
dataset <- read.csv("data.csv", header=TRUE)
# Import music values
musicValues <- read.csv("testSongs/bluesFromYoutube.csv", header=TRUE)
# remove file name column
dataset <- dataset[,-1]
musicValues <- musicValues[,-1]
# Load library
library(dplyr)
library(na.tools)
library(caret)
library(naivebayes)
library(randomForest)
# String to Levels (factor)
dataset$label <- as.factor(dataset$label)
# knn
knn.model <- knn3(label ~., data=dataset, k=50)
knn.preds <- predict(knn.model, musicValues,type="class")
knn.preds # result
# naive bayes
nb.model <- naive_bayes(label ~., data=dataset)
nb.preds <- predict(nb.model, musicValues,type="class", laplace=1)
nb.preds # result
# random forest
randomForestModel <- randomForest(label ~ ., data = dataset, ntree = 5000, mtry = 6, importance = TRUE)
predValid <- predict(randomForestModel, musicValues, type = "class")
predValid # result
# Get genre of a unique music
# Import dataset
dataset <- read.csv("data.csv", header=TRUE)
# Import music values
musicValues <- read.csv("testSongs/classicalFromYoutube.csv", header=TRUE)
# remove file name column
dataset <- dataset[,-1]
musicValues <- musicValues[,-1]
# Load library
library(dplyr)
library(na.tools)
library(caret)
library(naivebayes)
library(randomForest)
# String to Levels (factor)
dataset$label <- as.factor(dataset$label)
# knn
knn.model <- knn3(label ~., data=dataset, k=50)
knn.preds <- predict(knn.model, musicValues,type="class")
knn.preds # result
# naive bayes
nb.model <- naive_bayes(label ~., data=dataset)
nb.preds <- predict(nb.model, musicValues,type="class", laplace=1)
nb.preds # result
# random forest
randomForestModel <- randomForest(label ~ ., data = dataset, ntree = 5000, mtry = 6, importance = TRUE)
predValid <- predict(randomForestModel, musicValues, type = "class")
predValid # result
# Get genre of a unique music
# Import dataset
dataset <- read.csv("data.csv", header=TRUE)
# Import music values
musicValues <- read.csv("testSongs/metalFromYoutube.csv", header=TRUE)
# Get genre of a unique music
# Import dataset
dataset <- read.csv("data.csv", header=TRUE)
# Import music values
musicValues <- read.csv("testSongs/metalFromYoutube.csv", header=TRUE)
# remove file name column
dataset <- dataset[,-1]
musicValues <- musicValues[,-1]
# Load library
library(dplyr)
library(na.tools)
library(caret)
library(naivebayes)
library(randomForest)
# String to Levels (factor)
dataset$label <- as.factor(dataset$label)
# knn
knn.model <- knn3(label ~., data=dataset, k=50)
knn.preds <- predict(knn.model, musicValues,type="class")
knn.preds # result
# naive bayes
nb.model <- naive_bayes(label ~., data=dataset)
nb.preds <- predict(nb.model, musicValues,type="class", laplace=1)
nb.preds # result
# random forest
randomForestModel <- randomForest(label ~ ., data = dataset, ntree = 5000, mtry = 6, importance = TRUE)
predValid <- predict(randomForestModel, musicValues, type = "class")
predValid # result
# Get genre of a unique music
# Import dataset
dataset <- read.csv("data.csv", header=TRUE)
# Import music values
musicValues <- read.csv("testSongs/popFromYoutube.csv", header=TRUE)
# remove file name column
dataset <- dataset[,-1]
musicValues <- musicValues[,-1]
# Load library
library(dplyr)
library(na.tools)
library(caret)
library(naivebayes)
library(randomForest)
# String to Levels (factor)
dataset$label <- as.factor(dataset$label)
# knn
knn.model <- knn3(label ~., data=dataset, k=50)
knn.preds <- predict(knn.model, musicValues,type="class")
knn.preds # result
# naive bayes
nb.model <- naive_bayes(label ~., data=dataset)
nb.preds <- predict(nb.model, musicValues,type="class", laplace=1)
nb.preds # result
# random forest
randomForestModel <- randomForest(label ~ ., data = dataset, ntree = 5000, mtry = 6, importance = TRUE)
predValid <- predict(randomForestModel, musicValues, type = "class")
predValid # result
# Get genre of a unique music
# Import dataset
dataset <- read.csv("data.csv", header=TRUE)
# Import music values
musicValues <- read.csv("testSongs/discoFromYoutube.csv", header=TRUE)
# remove file name column
dataset <- dataset[,-1]
musicValues <- musicValues[,-1]
# Load library
library(dplyr)
library(na.tools)
library(caret)
library(naivebayes)
library(randomForest)
# String to Levels (factor)
dataset$label <- as.factor(dataset$label)
# knn
knn.model <- knn3(label ~., data=dataset, k=50)
knn.preds <- predict(knn.model, musicValues,type="class")
knn.preds # result
# naive bayes
nb.model <- naive_bayes(label ~., data=dataset)
nb.preds <- predict(nb.model, musicValues,type="class", laplace=1)
nb.preds # result
# random forest
randomForestModel <- randomForest(label ~ ., data = dataset, ntree = 5000, mtry = 6, importance = TRUE)
predValid <- predict(randomForestModel, musicValues, type = "class")
predValid # result
